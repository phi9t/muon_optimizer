[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "muon-optimizer"
version = "1.0.0"
description = "PyTorch implementation of Muon optimizer - MomentUm Orthogonalized by Newton-schulz"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    {name = "Based on implementation by Keller Jordan and contributors"},
]
keywords = ["pytorch", "optimizer", "machine-learning", "deep-learning", "orthogonalization"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "torch>=2.7.1",
    "rich>=14.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=24.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
benchmarking = [
    "matplotlib>=3.10.0",
    "plotly>=6.0.0",
    "seaborn>=0.13.0",
    "dash>=3.1.0",
    "dash-bootstrap-components>=2.0.0",
    "torchvision>=0.22.0",
    "numpy>=1.24.0",
    "pillow>=10.0.0",
]
all = [
    "muon-optimizer[dev,benchmarking]",
]

[project.urls]
Homepage = "https://github.com/phi9t/muon_optimizer"
Repository = "https://github.com/phi9t/muon_optimizer"
Documentation = "https://github.com/phi9t/muon_optimizer/blob/main/README.md"
Issues = "https://github.com/phi9t/muon_optimizer/issues"

[tool.setuptools]
py-modules = ["muon_optimizer"]

[tool.setuptools.packages.find]
where = ["."]
include = ["muon_optimizer*"]
exclude = ["*_test*", "tests*", "example_*", "minimalist_*", "mnist_*"]

# Additional tool configurations
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["."]
python_files = ["*_test.py", "test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["muon_optimizer"]
omit = [
    "*_test.py",
    "test_*.py",
    "example_*.py",
    "minimalist_*.py", 
    "mnist_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
